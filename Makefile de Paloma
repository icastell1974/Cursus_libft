
SRCS	=	ft_memset.c \
			ft_bzero.c \
ft_memcpy.c \
ft_memccpy.c \
ft_memmove.c \
ft_memchr.c \
ft_memcmp.c \
ft_strlen.c \
ft_strlcpy.c \
ft_strlcat.c \
ft_strchr.c \
ft_strrchr.c \
ft_strnstr.c \
ft_strncmp.c \
ft_atoi.c \
ft_isalpha.c \
ft_isdigit.c \
ft_isalnum.c \
ft_isascii.c \
ft_isprint.c \
ft_toupper.c \
ft_tolower.c \
ft_calloc.c \
ft_strdup.c \
ft_substr.c \
ft_strjoin.c \
ft_strtrim.c \
ft_split.c \
ft_itoa.c \
ft_strmapi.c \
ft_putchar_fd.c \
ft_putstr_fd.c \
ft_putendl_fd.c \
ft_putnbr_fd.c   
	
 
SRCS_BONUS	=  ft_lstnew.c \
ft_lstlast.c \
ft_lstadd_front.c \
ft_lstadd_back.c \
ft_lstsize.c \
ft_lstiter.c \
ft_lstclear.c \
ft_lstdelone.c \
ft_lstmap.c

OBJS	= $(SRCS:.c=.o)				#Transformar los archivos .c a .o y almacnarlos en la variable OBJS

OBJS_BONUS	= $(SRCS_BONUS:.c=.o)	#Igual que OBJS pero solo para funciones bonus

NAME 	= libft.a 		#Nombre de lo que quiero crear

CC 		= gcc 			#Que tipo de compilación quiero usar

AR 		= ar 			#ar no es un compilador, es mas bien un empaquetador de archivos .o

CFLAGS 	= -Wall -Werror -Wextra #Flags para el compilador. -g es para el depurador

RM 		= rm -f 		#Variable para meterlo dentro de clean y borrar archivos concretos rm = borrar -f= para que no pida confirmación

#REGLAS (PROGRAMAS, EJECUTABLES, ETIQUETAS)

#Compila los archivos .o y les pone el nombre de cada función pero es algo que tiene makefile incorporado y le modificamos el comportamiento
.c.o:		#No tiene dependecias
		$(CC) $(CFLAGS) -c $< -o $(<:.c=.o)
			
#-c genera el .o (pero no tiene nombre)
#$< coge el nombre de cada uno (de uno en uno) de los archivos .c (Algo específco de makefile)
#-o es lo que da el nombre del archivo de salida
#<:.c=.o El nombre que me haya dado antes me lo pones en .o

#Esta regla se activa cuando ejecute el nombre que pone en NAME
$(NAME):	$(OBJS) #Este programa necesita que existan todos los .o y por eso le pongo como dependencias OBJS, para que compruebe que existen los archivos y si nos los crea con .c.o
		$(AR) -r -c $(NAME) $(OBJS)
		$(AR) -s $(NAME)
#-r remplaza o añade los archivos específicos
#-c me hace NO ver los errores por pantalla
#$(NAME) como se va a guardar el archivo resultante
#$(OBJS) todos los archivos que quiero guardar en el $(NAME)
#La segunda línea solo actualiza el índice de archivos que hay dentro del .a (con el -s)
#Puedo añadir las líneas que quiera y se ejecutan en orden de arriba a abajo

#all es algo que no hace falta por sí misma, es una convención para que todos los makefile se ejecuten igual
all:		$(NAME)
#all me exime conocer el nombre del archivo resultante

#Necesitamos una regla para borrar los OBJS (los .o)
clean:		#No necesita de dependencias
		$(RM) $(OBJS) $(OBJS_BONUS)

#En fclean quiero que además de borrar los .o tambien borre la biblioteca .a
fclean:		clean
		$(RM) $(NAME)
#En este caso necesito a clean como dependencia para que se ejecute primero
#$(NAME) es para que borre la bliblioteca .a que hemos creado

#Si necesitamos borrar todo y crear una nueva biblioteca pues tengo este comando
re:			fclean all
#En este caso no hace nada nuevo y por eso no tengo instrucciones, solo dependencias

#Evita buscar el nombre de la regla como si fuera un archivo
.PHONY: all clean fclean re
#Aquí solo meto las reglas que no generan código. Por si mismo no hacen nada sino que mandan hacer

bonus:		$(OBJS)$(OBJS_BONUS)
		$(AR) -rc $(NAME) $(OBJS) $(OBJS_BONUS)
		$(AR) -s $(NAME)
#Yo no se si esta vaina funciona pero crearía una librería completa o actulizaría la ya creada con los bonus

#--EXTRA--

